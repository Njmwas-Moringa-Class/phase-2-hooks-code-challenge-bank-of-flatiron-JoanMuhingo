{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jojo/phase-2-hooks-code-challenge-bank-of-flatiron-JoanMuhingo/src/components/AddTransactionForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nfunction AddTransactionForm({\n  onAddTransaction\n}) {\n  _s();\n\n  const [formData, setFormData] = useState({\n    date: \"\",\n    description: \"\",\n    category: \"\",\n    amount: 0\n  });\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({ ...prevData,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    onAddTransaction(formData);\n\n    try {\n      const response = await fetch('http://localhost:8001/transactions', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to add transaction\");\n      }\n\n      setFormData({\n        date: \"\",\n        description: \"\",\n        category: \"\",\n        amount: 0\n      });\n    } catch (error) {\n      console.error('Error posting transaction', error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui segment\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ui form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline fields\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          placeholder: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"category\",\n          placeholder: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"amount\",\n          placeholder: \"Amount\",\n          step: \"0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button\",\n        type: \"submit\",\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTransactionForm, \"U+TQTZOVffKqrJ7Qfsm0LJtE7+Y=\");\n\n_c = AddTransactionForm;\nexport default AddTransactionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTransactionForm\");","map":{"version":3,"sources":["/home/jojo/phase-2-hooks-code-challenge-bank-of-flatiron-JoanMuhingo/src/components/AddTransactionForm.js"],"names":["React","useState","AddTransactionForm","onAddTransaction","formData","setFormData","date","description","category","amount","handleChange","e","name","value","target","prevData","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,SAASC,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAgD;AAAA;;AAC9C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC;AACvCK,IAAAA,IAAI,EAAE,EADiC;AAEvCC,IAAAA,WAAW,EAAE,EAF0B;AAGvCC,IAAAA,QAAQ,EAAE,EAH6B;AAIvCC,IAAAA,MAAM,EAAE;AAJ+B,GAAD,CAAxC;;AAMA,QAAMC,YAAY,GAAIC,CAAD,IAAM;AACzB,UAAO;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA3B;AACAT,IAAAA,WAAW,CAAEU,QAAD,KAAe,EAAC,GAAGA,QAAJ;AAAc,OAACH,IAAD,GAAQC;AAAtB,KAAf,CAAD,CAAX;AACD,GAHD;;AAKA,QAAMG,YAAY,GAAE,MAAOL,CAAP,IAAa;AAC/BA,IAAAA,CAAC,CAACM,cAAF;AACAd,IAAAA,gBAAgB,CAACC,QAAD,CAAhB;;AAEA,QAAG;AACF,YAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAsC;AACjEC,QAAAA,MAAM,EAAE,MADyD;AAEjEC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFwD;AAKjEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAepB,QAAf;AAL2D,OAAtC,CAA5B;;AAOA,UAAI,CAACc,QAAQ,CAACO,EAAd,EAAiB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACA;;AACDrB,MAAAA,WAAW,CAAC;AACXC,QAAAA,IAAI,EAAE,EADK;AAETC,QAAAA,WAAW,EAAE,EAFJ;AAGTC,QAAAA,QAAQ,EAAE,EAHD;AAITC,QAAAA,MAAM,EAAE;AAJC,OAAD,CAAX;AAMA,KAjBD,CAkBA,OAAOkB,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA0CA,KAA1C;AACD;AACF,GAzBD;;AA0BA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,aAAxB;AAAsC,UAAA,WAAW,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,UAAxB;AAAmC,UAAA,WAAW,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAC,QAA1B;AAAmC,UAAA,WAAW,EAAC,QAA/C;AAAwD,UAAA,IAAI,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,IAAI,EAAC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GArDQzB,kB;;KAAAA,kB;AAuDT,eAAeA,kBAAf","sourcesContent":["import React, {useState} from \"react\";\n\nfunction AddTransactionForm({onAddTransaction}) {\n  const [formData, setFormData] = useState({\n    date: \"\",\n    description: \"\",\n    category: \"\",\n    amount: 0,\n  });\n  const handleChange = (e) =>{\n    const  { name, value } = e.target;\n    setFormData((prevData) => ({...prevData, [name]: value}));\n  };\n  \n  const handleSubmit =async (e) => {\n    e.preventDefault();\n    onAddTransaction(formData);\n\n    try{\n     const response = await fetch('http://localhost:8001/transactions',{\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(formData),\n     });\n     if (!response.ok){\n      throw new Error(\"Failed to add transaction\");\n     }\n     setFormData({\n      date: \"\",\n        description: \"\",\n        category: \"\",\n        amount: 0,\n     });\n    }\n    catch (error) {\n      console.error('Error posting transaction',error);\n    }\n  };\n  return (\n    <div className=\"ui segment\">\n      <form className=\"ui form\">\n        <div className=\"inline fields\">\n          <input type=\"date\" name=\"date\" />\n          <input type=\"text\" name=\"description\" placeholder=\"Description\" />\n          <input type=\"text\" name=\"category\" placeholder=\"Category\" />\n          <input type=\"number\" name=\"amount\" placeholder=\"Amount\" step=\"0.01\" />\n        </div>\n        <button className=\"ui button\" type=\"submit\">\n          Add Transaction\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default AddTransactionForm;\n"]},"metadata":{},"sourceType":"module"}